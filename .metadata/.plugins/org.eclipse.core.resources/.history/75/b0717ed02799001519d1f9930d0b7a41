import java.io.BufferedReader;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.TreeMap;
import java.util.Arrays;

public class Classifier2 extends Classifier {
	//All features and their possible values, numeric will only store numeric in the array
	TreeMap<String, String[]> featureValues= new TreeMap<String, String[]>();
	String[] featureToIndex;
	ArrayList<ArrayList<String>> testData = new ArrayList<ArrayList<String>>();
	ArrayList<String> outputClass = new ArrayList<String>();


	public Classifier2(String namesFilepath) {
		super(namesFilepath);


		try {
			BufferedReader reader = new BufferedReader(new FileReader(namesFilepath));
			String line;

			if((line = reader.readLine()) != null) { //get first line for output classes
				String[] entry = line.split("[\\s]+");
				for (String s: entry){
					outputClass.add(s); //store all possible output classes
				}
			}

			while ((line = reader.readLine()) != null) { //get rest of information
				while (line.trim().isEmpty()){ //ignore blank lines
					line = reader.readLine();}

				String[] entry = line.split("[\\s]+");
				String feature = entry[0];
				String[] values = Arrays.copyOfRange(entry, 1, entry.length);
				featureValues.put(feature, values);
			}
			featureToIndex = (String[]) featureValues.keySet().toArray();
			reader.close();
		}
		catch (Exception e){
			System.err.format("Exception occurred trying to read '%s'.", namesFilepath);
			e.printStackTrace();
		}
	}

	@Override
	public void train(String trainingDataFilpath) {
		//hashmap to store the count of output values to their number of occurences
		//TreeMap<String, Integer> outputCount = new TreeMap<String, Integer>();
		try {
			BufferedReader reader = new BufferedReader(new FileReader(trainingDataFilpath));
			String line;
			int i = 0;
			while ((line = reader.readLine()) != null) {
				while (line.trim().isEmpty()) //ignore blank lines
					line = reader.readLine();
				String arr[] = line.split("[\\s]+");
				int l = arr.length;
				for(String s : arr){
					testData.get(i).add(s);
				}
				i++;
			}
			//get the Entropy of the whole set
			double tot_ent = entropy(outputCount);
			double tot_size = 0;
			for(Integer i : outputCount.values()){
				tot_size += i;
			}
			
			for(int i = 0; i < featureToIndex.length; i++)
				System.out.println(featureToIndex[i] + " " + gain(features, (String)featureToIndex[i], tot_ent, tot_size));

			reader.close();
		}
		catch (Exception e){
			System.err.format("Exception occurred trying to read '%s'.", trainingDataFilpath);
			e.printStackTrace();
		}

	}

	@Override
	public void makePredictions(String testDataFilepath) {
		// TODO Auto-generated method stub

	}

	public ArrayList<String> getOutputClass() {
		return this.outputclass;
	}

	public HashMap<String, ArrayList<featureValue>> getFeatures() {
		return this.features;
	}

	public double gain(LinkedHashMap<String, ArrayList<featureValue>> s, String feature, double tot_ent, double size) {
		double entropy_v = 0;
		double v_mag = 0;
		double sum = 0;
		for(featureValue f: s.get(feature)){
			entropy_v = entropy(f.classVal);
			for(Integer i : f.classVal.values()){
				v_mag += i;
			}
			sum = sum + (v_mag/size)*entropy_v;
			v_mag = 0; //reset v_mag for next iteration
		}
		
		return tot_ent-sum;
	}

	//recieves some subset of the test data
	public double entropy(ArrayList<ArrayList<String>> s) {
		TreeMap<String, Integer> outputCount = new TreeMap<String, Integer>();
		int i = 0;
	    int index = s.get(i).size()-1;
	    while (i < s.size()){
	    	String value = s.get(i).get(index);
	    	if (outputCount.keySet().contains(value)){
	    		int old_value = outputCount.get(value);
	    		outputCount.put(value, old_value+1);
	    	}
	    	else{
	    		outputCount.put(value, 1);
	    	}
	    }
		
		double sum = 0;
		for (Integer b : s.values()){
			sum += b;
		}
		double entropy_num = 0;
		for (String c : s.keySet()){
			double count = s.get(c);
			if (count != 0)
				entropy_num += (-1)*(count/sum)*Math.log(count/sum)/Math.log(2);
		}
		
		return entropy_num;
	}


	public static void main(String[]args) {
		Classifier2 dt = new Classifier2("census.names");
		dt.train("census.train");
	}
}
